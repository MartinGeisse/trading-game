
Mögliche Ziele:

1. Den aktuellen Stand als (in Bezug auf Push) statische Seite rendern, wobei möglicherweise ein inkonsistenter Stand gerendert wird.
	-> Einfach, und man muss einfach nur von allen benötigten Projectors den aktuellsten Stand holen und rendern.

2. Einen möglichst aktuellen, konsistenten Stand rendern. Wenn ein Projector einen aktuelleren Stand hätte, aber ein anderer nicht, dann
	darf der aktuellere Stand nicht benutzt werden. Dafür müssen Projectors mindestens so lange einen alten Stand liefern können,
	wie dieser ggf. noch gerade gerendert wird. Sicherheitshalber müssen Seiten also sagen, wenn sie noch am Rendern sind, oder aber
	in der Lage sein, bei nicht-mehr-vorhandensein aller Projector-Stände das Rendern mit einem aktuelleren Stand neu zu starten.

3. Wie 2., nur dass der aktuellste konsistente Stand gerendert werden muss, nicht nur ein "möglichst aktueller". Hat strengere Anforderungen
	an die Synchronisierung.

4. Wie 1., und Updates werden gepusht. Durch die Updates ist die Inkonsistenz vielleicht nicht egal, aber weniger schlimm (für ein Spiel reicht es).
	Allerdings muss es dazu möglich sein, dass Updates verarbeitet werden, obwohl die verschiedenen Projectors der Seite auf unterschiedlichen
	Ständen sind.

5. Wie 2., und konsistente Updates werden gepusht. Ein "wie 3. mit Updates" ist unnötig, da die Updates den Rückstand aufholen. Hat strengere Anforderungen
	an die verfügbaren Stände der Projectors. Dafür muss die Seite immer nur mit einem einzigen, konsistenten Stand klarkommen, und der Benutzer
	sieht immer nur konsistente Daten.

Für das Spiel ist 4 oder 5 nötig. Zumindest für Teile der Seite, und dann kann man es auch gleich für alles nehmen.

Wie ist der genaue Ablauf? Wie kommen denn die Wicket-Komponenten an die Projections? Über ein Model. Dieses Model zieht einen möglichst aktuellen
Stand aus der Prerender-DB. Außerdem registriert sie *gleichzeitig* einen Listener, un Neuerungen an der Projection mitzubekommen. Das Model
kann das nicht alleine machen, zumindest nicht als reines Model. (Müsste eine Art PushModel sein und entsprechend mit der Component zusammenarbeiten).
->
Wenn man das so macht -- egal wie genau -- dann werden Änderungen, die mehrere Projections betreffen, leicht mehrere Push-Request-Cycles auslösen!
Hier wäre es möglich, kurz zu warten und Änderungen zu sammeln. Die Alternative wäre es, immer einen konsistenten Stand zu pushen (also 5.) -- zumindest der
Fall, dass mehrere Projectors betroffen sind, wäre ja inkonsistent, wenn nur ein Teil davon gepusht wird.

2. (und damit auch 3. und 5.) benötigt Angaben darüber, welche Daten die Seite braucht, *bevor* sie sie braucht. Das ist im Grund eine Auflistung von
Projectors, die abgefragt werden -- ein onBeforeRender() aller Push-Models wäre sowas, reicht aber nur aus, wenn man alte Stände aus den Projectors
abrufen kann. Falls man das nicht kann, muss in der Projector-Struktur hinterlegt werden, welche Kombinationen von Projectors als Konsistente Stände
benötigt werden.
->
Für das Spiel klingt es wesentlich einfacher, die verschiedenen Projectors unabhängig zu betrachten, und Pushes zu sammeln, bevor sie gesendet werden.

Der Plan wäre demnach:
- immer nur den aktuellsten Stand je Projector speichern
- Derived Projectors müssen mit Inkonsistenzen zwischen verschiedenen Projectors klarkommen
- Seiten werden evtl. inkonsistent gerendert
- verschiedene Komponenten, die an verschiedenen Projectors hängen, rennen unabhängig voneinander auf den aktuellsten Stand zu (eventual consistency)
- Änderungen an allen Projectors werden per Websockets gepusht
- dabei werden zeitlich nah liegende Änderungen per Guckloch-Verfahren zusammen gesendet


----------------------------------------------------------------------------------------------------

Mal andersrum gedacht: Wie schwer wäre es denn, immer nur konsistente Stände zur Verfügung zu stellen?
- jeder Projector müsste auf jeden Event reagieren
	Wenn alte Versionen der Projections abrufbar sein sollen:
		- dazu müssten Projectors, wenn sie einen Event ignorieren, einfach nur den entsprechenden "bis"-Index hochzählen
		- dazu müssten Projections einen "bis"-Index haben, also nicht für eine Version, sondern eine Versions-Range gültig sein
	Wenn nicht:
		- dann müssten Projectors, wenn ein Event egal ist, die alte Projection als neue Projection übernehmen können
		- das geht ganz einfach, wenn man annimmt, dass nach Ablauf aller Projectors immer die aktuelle Projection in der DB steht --
			dann müsste in diesem Fall nämlich gar nichts getan werden, da die gültigen Versionen nur die aktuelle Version enthalten
			und deshalb gar nicht in der DB gespeichert werden
		- allerdings ist es dann extrem schwer, einen konsistenten Zustand in der DB einzufangen, da sich ständig etwas Ändert
	-->
	"Keine alten Projections abrufbar" => "abgerufene Stände sind grundsätzlich inkonsistent" (Konsistenz nur zufällig); entspricht der Art
	und Weise, wie klassisch DBs benutzt werden.
-->
- alte Projection-Stände werden zumindest eine Zeit lang gespeichert
- jeder Projector müsste auf jeden Event reagieren
- Projections haben von-bis Gültigkeit
- Projectors, die einen Event für eine bestimmte Projection ignorieren, erweitern nur deren Gültigkeit
- das kann auch so passieren, dass nach Ablauf des Projectors (und hochzählen des Gültigkeits-Index dieses Projectors) keine neuere Version der
	Projection in der DB steht. Falls sich doch etwas ändert, steht eine neue Version zusätzlich zur alten Version in der DB.
- Das heißt, eine Projection braucht so gesehen nur eine Gültigkeit "von"; das "bis" ist "alles bis zur nächsthöheren von-Gültigkeit"!
- Wenn alle Projectors einen Event verarbeitet haben, dann muss zur Info von Clients ein globaler Konsistenzzähler weitergezählt werden (entpricht
	dem größten Index in der History, für den alle Projectors gelaufen sind)
- Einen konsistenten Stand bekommt man wie folgt:
	- Globalen Konsistenzindex holen. Dieser gibt den Stand an, den man bekommt
		- Hier wird nach einem globalen Index gegangen, weil ein lokaler Konsistenzindex Vorbereitungen braucht
		- Ein lokaler KI gibt an, ob alle Projectors eines definierten Projector-Sets bis mindestens zu diesem Index gelaufen sind
	- Für alle benötigten Projections wird die Projection-Version mit dem größten von-Index kleiner-gleich dem KI geladen
	- aus diesen Projections wird die Seite gerendert

------------------------------------------------------------------------

Neue Überlegung:
- Hohe Concurrency bei Reads bekomme ich von Read Models. Diese dürfen inkonsistent sein.
- Concurrency zwischen Reads und Writes bekomme ich auch durch Read Models (CQRS!)
- Hohe Concurrency bei Writes bekomme ich
	(1) durch das queueing von Commands, ggf. in Kombination mit asynchroner Web-Request-Verarbeitung (damit nicht mit einem queued command
		auch ein Thread schläft)
	(2) Batch-Verarbeitung dieser Commands
	(3) Paralleler Verarbeitung dieser Commands in mehreren Threads durch eine geeignete interne synchro-Logik der Spielelogik (nicht
		nach außen sichtbar)
- Die Weitergabe von Änderungen an Projectors ist noch ungeklärt, s.u.

Was wäre denn *ohne* ES?
- Dann könnten die internen Datenstrukturen nicht mehr direkt benutzt werden. Bei ES kann man Events abrufen und direkt verarbeiten, ohne
	ES kollidiert das mit der internen synchro-Logik. --> Ohne ES müssen ALLE Reads über Read Models laufen!
		-> es ist eh sinnvoll, dass alle Reads über RM laufen, s.u.
- Bei POST-Redirect-GET müsste nach dem enqueue des Commands auf ein Update aller Read Models gewartet werden, damit das Ergebnis
	sichtbar wird. Nicht so bei Websockets! Es muss gar nicht gewartet werden, sondern man sieht das, was im Server passiert, auch direkt
	in der GUI: Das Command wurde enqueued, und bei Update der Read Models werden die Änderungen per Websockets gepusht.
- Nachteil: Anders als bei ES kann die Änderung wirklich erst bei Update des Read Models sichtbar werden. ES könnte die neuen Events
	benutzen, um trotz eines veralteten Read Models die neuen Daten anzuzeigen.
		-> es ist eh sinnvoll, dass alle Reads über RM laufen, siehe:
- Allerdings: Von einem anderen Standpunkt aus bedeutet das: Weil das RM nicht rechtzeitig updated wurde, wird es im GUI-Thread on-the-fly
	updated, um richtige Daten anzuzeigen, und das Ergebnis danach weggeworfen. Da könnte auch der GUI-Thread das normale Update triggern,
	priorisieren und darauf warten. Das Priorisieren könnte sogar vorab passieren, wenn schon im Command (oder gleichzeitig) bekannt gegeben
	wird, welche Read Models benötigt werden. Das wäre auch weniger duplicate code. Diese Lösung wäre übrigens unabhängig von der Frage
	"ES oder nicht" sinnvoll -- auch bei ES bringt eine on-the-fly-update-Logik weniger, als das normale Update der RMs zu triggern.

Nach dieser Überlegung ist der Ansatz: CQRS ohne ES; Gekapselte Spielelogik, die nach außen Threadsicher ist, auf nur einer Maschine;
	alle Reads laufen über Read Models; Das Rendering der RMs und die GUI können auf viele Maschinen verteilt sein. Zusammen mit einem
	Command wird auch bekanntgegeben, welche Read Models priorisiert updated werden sollen. RM-Updates werden über Websockets gepusht.

Nachteile:
- Inkrementelles Rendern der RMs wird komplizierter bis unmöglich, da der Renderer in erster Linie den neuen Stand sieht
	- hier könnten Änderungen mitgegeben werden; das wäre ein "punktuelles ES als Optimierung"
	-> Im Hinterkopf: Man kann später immer noch auf komplettes ES umsteigen, wenn sich dadurch mehr optimieren lässt

Wie würde dann eine Seite vorgehen, die einen initialen Stand rendert und Updates per Websockets pusht?
- verschiedene Components benutzen verschiedene RMs und sind damit ggf. inkonsistent
- im Prinzip könnte sich die Seite erst als Listener registrieren und danach den aktuellen Stand abrufen. Dann müssen die Registrierung
	und das Abrufen nicht atomar passieren. Schlimmstenfalls bekommt die Seite dann ein Update auf den Stand, den sie schon hat
		-> Inkrementelles Rendern muss hiermit klarkommen, sofern es benutzt wird!
- Während des initialen Renderings müssen updates zurückgehalten werden und erst danach gepusht werden. Das müsste die Thread-Synchro
	von Wicket schon tun, aber es sollte so passieren, dass kein Thread schläft
- Während eines Update-Renderings müssen weitere Updates zurückgehalten werden, bis das Rendering fertig ist

Wesentliches Problem:
- Bei der Verarbeitung eines Commands werden die Spieledaten geändert und es müssen RMs updated werden. Wie wird erkannt, welche RMs das
	sind? Die Command-Verarbeitung sollte es nicht tun, sonst wird diese von den RMs abhängig, welche wiederum vom GUI abhängig sind.
	- Also muss die Command-Verarbeitung an die Listener weitergeben, welche Daten sich geändert haben
	- Das sind entweder "viele" Methoden (wächst mit den Datenstrukturen) oder "viele" Event-Klassen, welche die Änderung beschreiben
	- Damit kommt ein Aufwand ins Spiel, der an ES herankommt, aber ohne die Vorteile
- Bei ES gibt es dieses Problem auch, aber die Lösung ist offensichtlich: RMs werden von Projectors erzeugt, und diese geben an, welche
	Events für sie wichtig sind (per Filter). Also kann die Benachrichtigung der Filter von einer generischen Automatik passieren.
- Auf die schnelle gäbe es nur die Alternative, ohne ES und ohne Read Model zu arbeiten und stattdessen "klassisch"
	mit nur einem DB-Zustand zu arbeiten, der verändert wird und gleichzeitig als Read Model dient. Dann passiert
	zumindest die synchronisierung durch den DB-Server. Das hätte den Vorteil, dass es erst mal einfach zu coden ist,
	auch wenn es langfristig zu langesam ist und dann ersetzt werden müsste (nach aktueller Erkenntnis vermutlich durch
	ein ES-System).

